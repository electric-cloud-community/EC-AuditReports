#!ec-perl
# Unplug content
# Production stage audit report
# ectool setProperty /plugins/EC-AuditReports/project/audit_reports/approvalAudit --valueFile approvalAudit

use ElectricCommander;
use DateTime::Format::Strptime;
use strict;
use Data::Dumper;
use Try::Tiny;
$| = 1;

my $ec = new ElectricCommander({'format'=>'json'});

# Start with a nice title for the report
$HTML .= qq(
    <h1>Approval Audit Report</h1>
);

# Process general info section
$HTML .= qq(
    <h2>General Information</h2>
    <table class="data" cellspacing="0">
		<tr class="headerRow">
			<td>Label</td>
			<td>Value</td>
		</tr>
);

my $uuid = $cgi->url_param('flowRuntimeId');
my $flowRuntime=$ec->getPipelineRuntimeDetails({flowRuntimeId => $uuid})->{responses}[0]->{flowRuntime}[0]; 
my $flowRuntimeName = $flowRuntime->{flowRuntimeName};
my $pipelineName = $flowRuntime->{name};
my $startTime = $flowRuntime->{startTime};
my $completionTime = $flowRuntime->{completionTime};
my $status = $flowRuntime->{status};

$HTML .= qq(
	<tr>
		<td>Pipeline Execution</td>
		<td>$flowRuntimeName</td>
	</tr>
	<tr>
		<td>Pipeline Name</td>
		<td>$pipelineName</td>
	</tr>
	<tr>
		<td>Execution Start</td>
		<td>$startTime</td>
	</tr>
	<tr>
		<td>Execution Complete</td>
		<td>$completionTime</td>
	</tr>
	<tr>
		<td>Status</td>
		<td>$status</td>
	</tr>
);
$HTML .= qq(
   </table>
);

# Create hash to hold stage/gates/tasks data
# Once hash is complete, then create xhtml output (separation of data and presentation layers)
my %stagesHash;

# task indexes for proper sorting
my $preHashIndex = 0;
my $taskHashIndex = 1;
my $postHashIndex = 2;

# Loop through stages and store stage and gate task data
my $stages=$flowRuntime->{stages}->{stage};
for my $stage (@{$stages}) {
	my $stageIndex = $stage->{index};
        my $stageName = $stage->{name};
        $stagesHash{$stageIndex}{'name'} = $stageName;
        $stagesHash{$stageIndex}{'span'} = 0;
		$stagesHash{$stageIndex}{'stageColor'} = $stage->{colorCode};


	# loop through tasks for current stage
	my $tasks=$ec->getPipelineStageRuntimeTasks({flowRuntimeId => $uuid, stageName => $stageName})->{responses}[0]->{task};
	for my $task (@{$tasks}) {
		
		my $taskType = $task->{taskType};
		
		if ($taskType eq "MANUAL") {
		
			my $taskStatus = $task->{status};
			my $evidence = $task->{comment};
			my $approvalDate = $task->{endTime};
			
			my $user = $task->{approvedByUsers}->{approvedBy}[0];

			my $fullUserName;
			# Get full user name
			if ($user =~ m/^project:/) {
				# Unless it's a project principle, in which case just use 'approvers' 
				$fullUserName = $task->{approvers};
			} else {
				if ($user) {$fullUserName = $ec->getUser({userName => $user})->{responses}[0]->{user}->{fullUserName}}
			}
			
			# If no status exists then gate hasn't been reached yet
			if ($taskStatus eq "") {
				$taskStatus = "<i>Future</i>";
			}
			# bump stages span counter
			$stagesHash{$stageIndex}{'span'}++;

			# Add status color coding
			my $statusColor;
			if ($taskStatus eq "Approved" || $taskStatus eq "success") {
				$statusColor = "green";
			} elsif ($taskStatus eq "Pending") {
				$statusColor = "orange";
			} elsif ($taskStatus eq "Rejected" || $taskStatus eq "ABORT" || $taskStatus eq "error") {
				$statusColor = "red";
			} elsif ($taskStatus eq "skipped") {
				$statusColor = "gray";
			} else {
				$statusColor = "black";
			}		
			
			# store task name
			my $taskIndex = $task->{index};
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'name'} = $task->{taskName};
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'taskType'} = $task->{taskType};
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'fullUserName'} = $fullUserName;
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'status'} = $taskStatus;
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'approvalDate'} = $approvalDate;
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'evidence'} = $evidence;
			$stagesHash{$stageIndex}{'types'}{$taskHashIndex}{$taskIndex}{'statusColor'} = $statusColor;
		}
	}

	# loop through gate tasks for current stage
	my $gates=$stage->{gates}->{gate};
	for my $gate (@{$gates}) {
		my $gateType = $gate->{gateType};
		my $gateHashIndex = $preHashIndex;
		my $taskCount = $gate->{taskCount};
		if ($gateType eq "POST") {$gateHashIndex = $postHashIndex}

		# Loop through tasks
		my $taskIndex = 0;
		my $tasks=$gate->{tasks}->{task};
		for my $task (@{$tasks}) {
			# bump stages span counter
			$stagesHash{$stageIndex}{'span'}++;

			my $taskStatus;
			if ($taskCount eq 0) {
				next;
			} else {
				$taskStatus = $task->{status};
				# If no status exists then gate hasn't been reached yet
				if ($taskStatus eq "") {
					$taskStatus = "<i>Future</i>";
				}
			}
			
			# set defaults
			my $fullUserName = "";
			my $approvalDate = "";
			my $evidence = "";
			my $user = "";

			my $taskRunNumber = $task->{taskRunNumber};
			# If no runNumber exists then task only run once
			if ($taskRunNumber eq "") {
				$taskRunNumber = "";
			} else {
				$taskRunNumber = "(Run $taskRunNumber)";
			}
			my $taskType = $task->{taskType};
			if ($taskType eq "APPROVAL") {
				if ($taskStatus eq "Approved" || $taskStatus eq "Rejected") {
					$user = $task->{approvedBy};
					$approvalDate = $task->{approvalDate};
					$evidence = $task->{evidence};

					# Get full user name
					if ($user =~ m/^project:/) {
						# Unless it's a project principle, in which case just use 'approvers' 
						$fullUserName = $task->{approvers};
					} else {
						$fullUserName = $ec->getUser({userName => $user})->{responses}[0]->{user}->{fullUserName};
					}
				} 
			} 
			if ($taskType eq "PROCEDURE") {
				$approvalDate = $task->{endTime};
				$evidence = "Auto-approved by procedure: $task->{subprocedure}";
				$fullUserName = "[Auto-approved by procedure]";
			} 
			if ($taskType eq "CONDITIONAL") {
				$approvalDate = $task->{endTime};
				$evidence = "Auto-approved by conditional: $task->{name}";
				$fullUserName = "[Auto-approved by conditional]";
			} 
			
			# Add status color coding
			my $statusColor;
			if ($taskStatus eq "Approved" || $taskStatus eq "success") {
				$statusColor = "green";
			} elsif ($taskStatus eq "Pending") {
				$statusColor = "orange";
			} elsif ($taskStatus eq "Rejected" || $taskStatus eq "ABORT" || $taskStatus eq "error") {
				$statusColor = "red";
			} elsif ($taskStatus eq "skipped") {
				$statusColor = "gray";
			} else {
				$statusColor = "black";
			}	
			
			# store task name
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'name'} = $task->{name};
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'fullUserName'} = $fullUserName;
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'taskRunNumber'} = $taskRunNumber;
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'statusColor'} = $statusColor;
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'status'} = $taskStatus;
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'approvalDate'} = $approvalDate;
			$stagesHash{$stageIndex}{'types'}{$gateHashIndex}{$taskIndex}{'evidence'} = $evidence;

			
			# bump index counter
			$taskIndex++;
		}
	}
}

# create xhtml for stages hash data
$HTML .= qq(
    <h2>Details</h2>
    <table class="data" cellspacing="0">
		<tr class="headerRow">
			<td>Stage</td>
			<td>Type</td>
			<td>Label</td>
			<td>User</td>
			<td>Status</td>
			<td>Date</td>
			<td>Comment</td>
		</tr>
);
#$HTML .= Dumper %stagesHash;
for my $stageIndex (sort {$a<=>$b} keys %stagesHash) {
	$HTML .= qq(
		<tr>
			<td rowspan="$stagesHash{$stageIndex}{'span'}" style="background-color:$stagesHash{$stageIndex}{'stageColor'};"><font color="white">$stagesHash{$stageIndex}{'name'}</td>
	);

	if ($stagesHash{$stageIndex}{'types'}) {
		my %types = %{$stagesHash{$stageIndex}{'types'}};
		for my $typesIndex (sort {$a<=>$b} keys %types) {
			my %tasks = %{$types{$typesIndex}};
			my $taskName = "PRE";
			if ($typesIndex == $taskHashIndex) {$taskName = "TASK"}
			elsif ($typesIndex == $postHashIndex) {$taskName = "POST"}

			for my $taskIndex (sort {$a<=>$b} keys %tasks) {
				# Only combine with stage row if it is the first gate
				if ($taskIndex gt 0) {
					$HTML .= qq(
						<tr>
					);
				}
					my $statusColor = $stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'statusColor'};
					$HTML .= qq(
							<td>$taskName</td>
							<td>$stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'name'}</td>
							<td>$stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'fullUserName'}</td>
							<td><font color="$statusColor">$stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'status'}</font></td>
							<td>$stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'approvalDate'}</td>
							<td>$stagesHash{$stageIndex}{'types'}{$typesIndex}{$taskIndex}{'evidence'}</td>
						</tr>
					);
			}
		}
	}

}

$HTML .= qq(
   </table>
);

